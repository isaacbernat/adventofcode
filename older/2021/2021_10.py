example_readings = ["[({(<(())[]>[[{[]{<()<>>", "[(()[<>])]({[<{<<[]>>(", "{([(<{}[<>[]}>{[]{[(<()>", "(((({<>}<{<{<>}{[]{[]{}", "[[<[([]))<([[{}[[()]]]", "[{[{({}]{}}([{[{{{}}([]", "{<[[]]>}<{[{[{[]{()[[[]", "[<(<(<(<{}))><([]([]()", "<{([([[(<>()){}]>(<<{{", "<{([{{}}[<[[[<>{}]]]>[]]", ]
readings = ["<{([{(<[(<[({<{}[]>([]{})})((<{}[]>{[]{}})([(){}]<()<>>))]>)({([<{<>[]}(<>[]>>][([()[]]{[]()})<(<>{}", "[[[[[({(([<[[([][])<<>()>]{<[]{}>(()<>)})(<<<>[]>{<><>}>(<(){}><[]()>))>](([(<{}[]>(()()))<<{}{}", "[[[<(([([<{<<<<><>>([]{})>{{{}()}<[]()>}><[{{}{}}(<><>)]>}<(({{}()}(<>[]))({[]()}[[]]))(<[[]()](())>({{", "(([<{<<[[<{(([[]]<<>>){([]{})<(){}>})}>{{{[<<>[]>([][]>]}}[{[{<>[]}[<><>]][[<>()]({}())]}(<{[]}[()[]]><", "[<<[{{({[{{[<<<><>>[{}<>]>[<<>{}>(()[])]]}}<[(<<{}[]]([]<>)>)[[{<><>}{()()}]<<<>()>>]]<({(<>{})}[{", "[<{<({{[[<<<[([]{}){[]<>]][<<>{}>]>{[[[]<>][<>[]]]}>>{[[<(()())<<>[]>>[{{}[]}{[][]}]][[([]())<()<>>][([]<>)<[", "<{<{<[(((<((<[()<>]<[]()>>{<<>()>(<>[])}))>)[([(([()]<{}[]>)[{<>()}[[]{}]])<<[[]<>][{}]>{[{}()]([]<>)}>", "([{[{(({{((([{[]()}[[]()]])[<({}<>){<>{}}>{{{}[]}{()()}}])[[((()<>)[<><>])[({}<>)({}())]]]}[[[[<<>()>[{}[]]]", "[[[<[<{[(<<(({[]<>}(<><>)){[()<>]})>><([[<[]()>]([<>[]]<()[]>)]{({{}()}<[]<>>)[({}<>)<<>{}>]>)[<({{", "<{{[[[<([<<<(<[]()>)([<>[]]<{}{}>)>[[[[][]]](<()[]>[()[]])]>>]{{[(({<>()}{<><>}){(()<>}[[]{}]}", "{<{<((([<{<{[{[][]}{[]()}][({}[]){{}[]}]}{((<><>)(<>{}])(<{}()><<><>>)}>(<{{<>{}}{()()}}>[<(<><>)[<>", "<{[<<[([[<<{[<<>[]>](<{}()>)}[(<<>{}>{{}[]})<[(){}][[]()]>]>>]<{{[<{()()}{()[]}>[(<>[]){()()}]][{(", "[[<<(<{{<{{{([{}()][[]]){{()[]}((){})}}[[[<><>]{<>}]{[<>[]]{(){}}}]}(<([()()][()()]){{()}([]())}>)}[[", "[<[{<((<{{((<{{}<>}[{}()]>[{[]()}{[]<>}])({[()()]}[{<>>([]{})]))}<((((<>{})(()<>)){{[][]}})){[{<<>[]>[{}{}", "[[([<{[[((<(<<{}{}>><{[]<>}>){<<()<>>[{}{}]>}><{[[()[]]{()()}][(<>{})]}{{{[][]}<[]()>}(<<>[]><(){}", "[[{<{[<<(({(<[[]()]<[]()>>([(){}]<{}>)){<[[]{}]{[]<>}>{<[]{}>[()<>]}}}{(((()){{}[]}){[<>{}]{[]()}})[({[]{}", "([<{{(({{<<<<({}[]){(){}}>{({}[])<[][]>}>[{(()<>)([]{})}(<[]()><{}[]>)]>({{{()[]}{(){}}}({()()}<[]{}", "<[({{({{{(([{(<>()){[][]}}[([]{})<[][]>]]{<[<>[]]<<>{}>>[[{}<>][{}[]]]})<([(())[()<>]](([]())[(){}]", "(<[<<<{{<([{[(<>{})(()<>)]([{}]{[][]>)}({{()[]}}((()()){(){}}))]([({()}[[]<>]){{<>[]}(()())}]<{[[]()]{{", "({{((<(([{{[<[{}{}][[][]]><[{}()]{[]{}}>]{<[<><>](<><>)>[{[]()}<<>[]>]}}<[{{[]{}}<(){}>]{{<>}<()<>>}][((<>", "({(({<<{(<<<[(()<>)((){})]<[<><>]<<>[]>>>([{(){}}{<>()}][({}())])><{<<<><>>(()())>{{{}()}[[][]]}", "({((<{((({<<<[{}{}][[]()]>[<{}<>>{{}<>}]>(<[[]<>][{}[]]>>>[[[<()>{()<>}]<{<><>}<[][]>>]{<(<", "{<<<[{(<{([{<<()()>((){})>}([[()()]](<<>())([][])))]({[({}<>){[][]}][(<>){<>[]}]}[{[{}[]]<[", "[[[{{[{((([{(<{}()><{}[]>)<{{}[]}[()()]>}{{{<>[]}[()()]}(([]{})[()()])}][<(({}())({}()))(({}<>)[{}", "<[{({[{[([[<(<(){}>{<>{}})>(([()[]]<[]{}>)<{{}()}{()<>}>)]][[<(<[]{}><()()>)[[()()]<(){}>]><[<()()><{}<>>]>", "[({<{[(<{([[[<[][]>{[]{}}]{{(){}}[{}()]}]{[(<><>)[<>{}]]{{[][]}}}])}><<[[[{({}())((){})}({{}{}}{[][]})]({<[]", "[{{(({[<[<({(<[][]>({}[]))[[()<>][()()]]})<[({<>}(<><>))[<<>[]>(<><>)]]<<[()[]]<<>()>>([()()]<[]<>>)>>>]", "<[[<{([((<[<<<{}()><<>[]>>{{[][]}}>[{{<><>}({}{})}<[{}()]>]]>){[((((()()){(){}})[[{}{}]{[]()}]))(<(([", "((<{{[(({(<([{{}()}{(){}}]<({}{})[[][]}>)><{{<()[]>({}())}<[<>[]]{<>[]}>}>)<<[[[<>{}](<>[])][{()}]]({(<>", "<([[([{[<[[<<(<><>)<()>>>]]<[<({<>[]}<[]>)><<({}())<{}<>>><({}())>>][(([<>{}]{()<>})[[{}<>]{()[]}])({<()()>", "[<[<[({<<({<{<[]<>>}[{<>[]}]>})>>}[<[(({([[]<>]<<>>)[<[]{}>]}))]>(([{<[[{}[]]<<>[]>]<{{}()}<[]", "[<[[(<<{[{{<<(<>{})<{}()>><<{}<>>(<>())>><{([][])[{}()]}[{[]{}}{{}[]}]>}<<<({}{}}[[]<>]><[", "<[{{([({[(<([(<>[])<[][]>][<[]{}>(<>)]){<[()<>]({}())>([{}()](()<>))}>(<{<<>()>[()]}>{{[<>[]]{()()}}{{", "(<<{[([([<{[[{{}()}(<><>)){[[][]]}]({<(){}>{()[]}}<((){}){[]()}>)}>(<(<<[]<>>{{}}>)>[[(<{}<>>{(){}}){{", "(((((<[<<([<<<[]{}>{<>[]}>(<[][]>[[][]])>])<<<{[<>[]]({}{})}[{()[]}<<>()>]>({<{}()><{}[]>}", "(([[[[[{[[{(((<>{})([]<>))(([]{})<()<>>))({{<>()}{[]()}}<<()()>(()[])>}}<[[{{}{}}(<>{})]{[[]()]{{}<>}}][<{<>(", "(<{{[{(((((<[<<><>>]>({(()<>)<{}<>>}{<<>[]>({}{})}))){<<<[{}[]][<>()]>><[<<>[]>]<[()()]<{}<>>>>>{[{{()[", "[[({<[{{{<[<{({}<>)<<>{}>}({<>[]}([]<>))>[{(<><>){<>}}({{}[]}([][]))]]>{{<[<{}>(()<>}]{<{}<>><(", "[<{{(<[<({[[{(<>()){{}[]}}[([][])<(){}>]]]<(<{{}{}}([]())>([[]{}]<[]<>>))<[<<><>>[<>{}]](([]()){<>", "{{{<(<<([{({[<{}{}>[[]<>]]{{(){}}[[]{}]>}(((()())[<>[]])((()[])[(){}])))<{<[{}{}]>}{(<{}[]>{{}<>})<", "(<<[<{{{{(<<(({}[])[()[]])<([]{})>>({({}())({}[])}{{<>[]}(()())}]>{[[[{}()]{<>()}]<(()())[<><>]>]}", "[<{<{(([((<{[{[]<>}(()[])]}[[[()()]{{}[]}]<<(){}>{()<>}>]><((<[]><{}{}))[{{}<>}])[{([][])<[]{}>}", "(<(<{[((((<(([()[]][<>()])<[[]]<{}[]>>)<<{{}()}([]<>)>({()()}(<><>))>>[([(()[])<[]<>>]{{()()}})[{(<>())[{}", "[<{(<((<[[[[[{[]<>}<<>{}>]([[][]]({}[]))]{([{}()][<><>])}]{<[({}<>)({}{})]<((){}){<>{}}>>({[[](", "([{[[<<[{(<(({[]<>}))><{[{{}<>}[()<>]]{{{}{}}<<>()>}}{({<>{}}<[]{}>)((<>{})([]{}})}>)<{[((()())(", "({([{{<{[<[[<({}[])[[][]]>{{{}()}{{}[]}}]><{(<<><>>{[]()})[{<>()}[{}{}]]}[{[{}[]](<>())}([()]{{}<>", "{{<{{{([(({<<[(){}]{()<>}>>({{{}<>}}{[<>()]})}[[[<{}()>(<>{})]<{{}<>}>][(({}())<<>()>)(({}<>){[]()})]]))[({<", "{{<((((<{{[([(<>())(<>[])])([[(){}]{<><>}]{<<>{}>({}())})]((({[]()}(<>()))(<[]{}>[{}<>]))<([[]()]{<>()})<", "(<[(([<{({<<{[<>{}]<[]()>}([<>{}}(<>()))>([<{}<>>[(){}]])>}){<[[{{[]{}}({}())}{<(){}>{()[]}}]{([[]{}]<{}[]>)", "[[{[{<<((<[((<{}()>({}<>)))({([]<>)}({{}[]}(<>{}))}]{<<{(){}}>{[[]{}]([]<>)}><<[{}{}]<[]{}>>", "<<<[<[<([[{<{((){}){<>()}}[[{}()]((){})}>}[(<<{}{}>[<>()]>{(<>{})[()<>]})[[(()<>)[[]()]][(()[])<", "[<((([{{([{<[<[]<>>(()())]<[()()]{<>())>><<[{}[]]<()<>>>[([]()){[]()}]>}{<([{}{}]<(){}>)[{<>{}}(", "{[[[([((<[[({({}{})[<><>]}[[<>[]]((){})])(<(()[]){{}<>}><<{}<>>([]<>)>)]]([<[{<><>}[{}<>]]", "(<[[[<([[[[{{<()<>>{()<>}}{[[]{}][{}<>)}}<({()[]}([])){(()[])({}())}>](([{{}[]}{<>{}}](([][])([][]))))]]<{", "[[({<<{{{<(<{<()[]>[[]<>]}{({}<>)}>(([{}<>]{{}[]})))>}([[{[[<><>](<>[])]}({<<>()>})][{{{()()}{[]()}}(({}[])(<", "[{[{{<{(<((<{[{}[]][<><>]}{<(){}>[[]{}]}>))<{[[<()[]><(){}>]<{[]<>}[()()]>]{(([]{})<[]>)(([", "([{{<[[[<{<<<{[]}{<>()}><[()()]{[]<>}>>[{[<>()>[<>()]}[[[]<>]{<><>}]]>(({[()()]{<><>}}[(<>", "[(<[[<<{{(({[<{}()>][{[][]}{{}<>}]}[<<<><>>>{([]<>){[]<>}}]))<(<[[()()][()()]]({(){}}[(){}])>{<(<>[])<{", "<[(<<{{[[{(([<<><>>{()()}]({()()}{{}{}}))<[{()()}<()()>]([{}[]]<[][]>)>)>]{(<[(({}())[[][]]){({})<", "<({<{<(<<[<[[[{}{}][[]{}]][{[]{}}{{}<>}]]><<{[{}{}]([]{})}([[]{}])>{<(<>{}){[]<>}>{{{}<>}([][])}}>](", "<[[[<(({[<<<({<>()}{[][]}>{({}<>){()}}>[{{<>[]}{()()}}[<{}[]>[<><>]]]>[<<(<>{})>([()<>][{}", "(<({{(((<{{({[{}<>){[]<>}}[({}()){{}[]}])[{<[]{}>(<>())}([()[]](<>()))]}{{(<()()>){{<>()}}}[{[", "[(<<<(<{(<{[{[[]()]{<>[]}}]{{[{}()][<><>]}<([][])<{}>>}}><{<<[{}()][<>()]}{({}<>)(()())}><<{{}()}<{}", "(({<{[[{<<<[[<()()>[[][]]]{{<>()}{()()}}]<(([]{})[[][]])>>>{[<[<[]()>[()[]]]<([]())(()<>)>>]<({{(){}}{", "{{[{{<[[[({{(({}[])[{}()])([{}()]{()<>}>}[[[<>()]{[][]}]{<()()>[<><>]}]}(<{[()()]({}<>)}[{()<>}{{}[]}]", "{<[[[{([(((({([]<>)}[[<>[]]]){[(()[])([][])]{[()]<<>{}>>})[[{(<>[])[{}()]}{{{}()}([]<>)}]{<<<>{}>([", "<({{([<<{<[((<(){}>{<><>])[{[][]}{{}{}}])]({[{{}[]}{()[]}][[()()](<>{})]}{(({}{}){[]()})})>}>>](<{", "[{{{(<<{<<<[(<{}<>>)]>><[{(<[]{}>{{}<>})[[<>{}]]}([[()()]<{}<>>])]<([<()[]>{{}{}}][[{}[]]<[]{}>])>", "<[(<[[<[[({[(({}())([]()))<[[]{}](<>{})>]{<<[][]><{}{}>>{[<>{}]([]())}}}){((({[][]}{<>[]}){[{}{}", "[((<<[[<[{{(([<><>])({()[]}<[][]>)]}}]<<([{[()()]<[]<>>}<[{}[]][<><>]>])<<<[<><>]<{}[]>>{{[][]}}>{<{<>[]}<()", "<{<[(<[({[<<(<{}{}>{{}{}})<(()<>){(){}}>][{<{}><<>()>}[(()[])<()()>]]>][[[{{{}<>}((){})}][([()[]]", "[((((<{[{{{<{(<>{})(<>[])}<[(){}][[]<>]>>>}}(<((<({}[])<()<>>>)(<[()[]][<>{}]><[[][]](()<>)>))((", "{[[<<[(((([(([<>[]]{()()})([<>[]]((){})))]{{[<{}<>><{}<>>]<{{}[]}(<>[])>}})<[([{{}()}((){})]{(<>{})<[]>})([<[", "<{(<<[(<<[{{(([])[<>{}])((()<>){[][]})}}]({([<{}>[[][]]](<(){}>{<>()}))[[<[]{}>](<()()>[()<>]", "[<({{{[(([{<({()()}<()<>>)<{<>{}}>>(<<()>[[]()]>[{()<>}<[]{}>])}]<<{<[<>[]]([]<>)>}><{{[<>()]({}(", "<<<({{({{[([[([]{})<()()>]<<<>()><[]()>>]({<[]()>[{}<>]}{{<>{}}{()()}}))<({((){})[[][]]}(({})<", "((<<{<[[([{(<((){})<<>[]>>{[[][]]<()[]>}){<(<>()){()[]}>[[[]<>]([]<>)])}]((<{{[]<>}{[]<>}}>", "({({{{(<<{<<([{}{}](()()))((<>{}){[]{}})>([[()<>]](([]())<[]{}>))>{[((()()))<((){})([]<>)>]((<", "<{{[[([{<{([<[()[]]>([()<>]([]))]<{{()()}{[]<>}}{{{}[]}<()>}>)<{[([]<>){()<>}][[()()][(){}]]}(({<><>", "{<{{({[[{<([{[()()][()<>]}[([]{})(<>())]))<<[(<>[]){{}()}][<<><>>[[]]]>>><{<<[()[]]({})>[[[]]<(", "(<[{{{{{<{<((({}<>)[<>()]))([<<><>>[()[]]])>}>([[{{[[]{}]<<>()>}}{({[]{}}([]{}))}>[(<({}()){()()}>", "<(([[([{<<{(<<[]>{()[]}>{[[]<>]<<><>>}){[<[]()>[<>{}]][([]{})<<><>>]}}>>{{<[<{[]<>}([]{})]{({}<>){", "<<{(<{<(<([{<{[]<>}>({[]()}{{}()})}<[{<>()}{<>()]]<<[]()>{()()}>>]<(([[]]{()()})[{{}[]}{{}}])(([{}", "<[<{[([[({<[[{()[]}({}[])]]([<<>{}>(<><>)]<([]())[{}<>]>)>[(((()){{}[]})(<[]>(()<>)))<[<<><", "<({{<<<<<<[<[{<>[]}[<>{}]]<<()()>{()}>>[<({}[])((){})>[<[]<>>[[]()]]]]>{{{[[[]{}](<>())]}}({(({}()){<>}", "({(<{[<<{[([{[[]()]<(){}>}<{()()}<(){}>>][([()()][<>[]])<([]())(()())>])]({[<<[]<>>{[][]}>", "[[(([<{<(<<[{{{}[]}[{}<>]}{<[]<>>[(){}]}]<{<()[]>{{}{}}}{{<>[]}{(){}}}>>{<[{()[]}{[]}]{{{}}{{}<", "{{({<<({[<{([[{}{}][{}<>]][([]{})<{}()>])<[[<><>][[]()]]{(<>{})<{}[]>}>}>{<([[{}{}](<>[])]{{<>[]}", "<((((({<([<({[()<>]([]())}({(){}}{<><>}))([[{}<>]([]<>)])><([<()()>[()<>]][[{}<>][{}()]]){[[<>[", "[(<<[{<[([(({[[]{}][[][]]}[([]<>){()}]){[{{}{}}{[][]}]{{()[]}[<><>]}}){(((()[])([]())))[[[{", "{{([<{([(<[(<<[]>{[]<>}>({<>()}<[][]>))]<<<[{}<>][{}{}]>[<()<>><{}{}>]><(<{}()>{<>()})[<()<>)([][])]>>><[<[", "<{[[<{<{<<[{<[[][]]<(){}>>{([]())[<>()]}}[[<()<>>({}{})]{([]<>){[]()}}]]>>}<{{({(({}{})<<>()>)[([])([]{})]})", "{[{{[[{<<{<[[<<><>>[<>[]]]<<{}<>><<>()>>]([[{}<>][{}[]]]([(){}]<<>()>))>{{<(()[])((){})>([{}<>]{<>()})}", "[(((<{[({<{[<([])<[]{}>><(()<>){()<>}>]<[({}<>)({}[])]<(<>)({}{})>>}>}]][(<({(<<[][]>>([()", "([<{<[<[{[<{<<<>{}>>{<<>()>[{}[]]}}<[{{}{}}[[][]]][(<>[])[{}[]]]>>{[[(<><>)[()<>]][({}<>)[<>(", "<<{<([([<[{([(<><>)<<>[]>][((){})(<>[])])<([()[]]{[][]})(({}<>)<(){}>)>}([{({}{})<<>>}[{(){}}[<>{}]]])][((", "[<<<((<{{{({[[[]{}][<>[]]]}{[{()[]}<{}{}>]<(<>{})(()<>)>})}(<<<[(){}]{[][]}>([{}<>]{()[]})>><{{<[]<>>{{", "{{[<<(<{(<(<{((){})([]())}(({}{})<{}{}>)>[[{[]}<[]())]{<{}{}>(()())}])<([(()<>)[()[]]]((()())([][])", "{(<<[(([{[<{({[]<>}(()())){<<>()><()()>}}<[(<>[])<<><>>]{[<>[]]<{}[]>}>>]}<{<<{[(){}]({}())}[(<>())]>", "(({{(<{[{{[<<[(){}]<<>[]>>((<>())<()()>)><(<()[]>)<[[]{}]<<>>>>][{(<()()><<>{}>)<(<><>){[]{}}>}]}})([(<<[<<>", "{({(<[[{([{(<{()()}<<>()>>)<(<{}[]}{(){}})[{[]<>}[[][]]]>}<[[[<>[]]<<>()>][[<>{}]]]<<(()[])([]", "[({[[{<({[{[<<<>{}][[]()]>]}][(({((){}){(){}}}[[[][]]<[]()>])([([][])[(){}]]))]})>}[(<({{[<({}{"]


values = {")": 3, "]": 57, "}": 1197, ">": 25137}
closes = {")": "(", "]": "[", "}": "{", ">": "<"}
opens = {"(": ")", "[": "]", "{": "}", "<": ">"}
ratings = {")": 1, "]": 2, "}": 3, ">": 4}


# PART 1
def calc_values(symbols):
    return sum(values[s] for s in symbols or [])


def get_corrupt(lines):
    corrupts = []
    for line in lines:
        tmp_line = [c for c in line]
        for index, c in enumerate(line):
            if c in opens.keys():
                continue
            else:
                is_corrupted = c
                tmp_line[index] = "Z"
                for i in reversed(range(index)):
                    if tmp_line[i] == "Z":
                        continue

                    if tmp_line[i] == closes[c]:
                        tmp_line[i] = "Z"
                        is_corrupted = ""
                        break
                    else:
                        break

                if is_corrupted:
                    corrupts.append(c)
                    break

    return corrupts


corrupt = get_corrupt(readings)
total = calc_values(corrupt)
print(total)


# PART 2
def get_non_corrupt(lines):
    good_lines = []
    for line in lines:
        tmp_line = [c for c in line]
        is_corrupted = True
        for index, c in enumerate(line):
            if c in opens.keys():
                continue
            else:
                is_corrupted = c
                tmp_line[index] = "Z"
                for i in reversed(range(index)):
                    if tmp_line[i] == "Z":
                        continue

                    if tmp_line[i] == closes[c]:
                        tmp_line[i] = "Z"
                        is_corrupted = ""
                        break
                    else:
                        break

                if is_corrupted:
                    break
        else:
            if not is_corrupted:
                good_lines.append(line)
    return good_lines


def restore_lines(lines):
    restorations = []
    for line in lines:
        tmp_line = [c for c in line]
        restore = []
        for index in reversed(range(len(line))):
            c = tmp_line[index]
            if c in opens.keys():
                restore.append(opens[c])
            elif c in closes.keys():
                tmp_line = close_nearest(tmp_line, closes[c])
            tmp_line[index] = "Z"
        restorations.append(restore)
    return restorations


def close_nearest(line, symbol):
    for index in reversed(range(len(line))):
        if line[index] == symbol:
            line[index] = "Z"
            return line


def rate_lines(lines):
    return [rate(line) for line in lines]


def rate(line):
    total = 0
    for c in line:
        total *= 5
        total += ratings[c]
    return total


partial_lines = get_non_corrupt(readings)
restored_lines = restore_lines(partial_lines)
ratings = rate_lines(restored_lines)
final_score = sorted(ratings)[int(len(ratings) / 2)]
print(final_score)
